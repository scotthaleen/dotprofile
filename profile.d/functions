
fzf-history(){
  eval $(history | fzf --tac +s | sed 's/ *[0-9]* *//');
};

fzf-killps(){
  ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9} ;
};

fzf-cd() {
  DIR=$(find ${1:-*} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf) && cd "$DIR" ;
};

fzf-emacs() {
  F=$(find ${2:-.}/* -type f | fzf -1 -q ${1:-""}) && emacs ${F}
};

fzf-emacs-nw() {
  F=$(find ${2:-.}/* -type f | fzf -1 -q ${1:-""}) && emacs -nw ${F}
};

fzf-cat(){
  F=$(find ${1:-.}/* -type f | fzf -1) && lolcat ${F}
};

fzf-clipboard(){
  find ${2:-.}/* -type f | fzf -1 -q ${1:-""} | tee >(tr -d '\n' | pbcopy)
  printf "\033[1;32mcopied to clipboard\033[0m\n"
};


shurg() {
 printf "¯\_(ツ)_/¯"
}

snowman() {
 printf "☃"
}

time-now(){
  date +"%Y%m%d%H%M%S"
}

set_env_proxy(){
  export ALL_PROXY=localhost:8099
  export http_proxy=http://localhost:8099
  export https_proxy=http://localhost:8099
  export no_proxy=localhost,127.0.0.0/8,127.0.1.1,127.0.1.1*,local.home
}

unset_env_proxy(){
  unset ALL_PROXY
  unset http_proxy
  unset https_proxy
  unset no_proxy
}

keychain() {
  # osx keychain to clipboard
  security find-generic-password -a $1 -s $2 -w | pbcopy
  printf "\033[32;1m $2 password copied to clipboard. \033[0m\n"
}

gif() {
  local infile
  local outfile
  if (( ${#*} == 0 )); then
     echo "nothing to do"
  elif (( ${#*} == 1 )); then
    infile=${1}
    outfile="${infile:r}.gif"
    ffmpeg -i "${infile}" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "${outfile}"
  fi
}

gifopt() {
  local infile
  local outfile
  local palette
  local R
  local pallet
  local filters

  if (( ${#*} == 0 )); then
     echo "nothing to do"
  elif (( ${#*} == 1 )); then
    R=$(cat /dev/urandom | env LC_CTYPE=C tr -cd 'a-zA-Z0-9' | head -c 12)
    infile="${1}"
    outfile="${infile:r}.gif"
    palette="/tmp/palette-${R}.png"

    filters="fps=10,scale=640:-1:flags=lanczos"
    ffmpeg -v warning -i "${infile}" -vf "$filters,palettegen" -y "${palette}"
    ffmpeg -v warning -i "${infile}" -i "$palette" -lavfi "$filters [x]; [x][1:v] paletteuse" -y "${outfile}"

    rm "${palette}"
  fi
}
